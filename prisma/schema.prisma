// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  // Used by Prisma Client
  url = env("DATABASE_URL")
  // Used by Prisma Migrate
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  clerkId   String   @id
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("member")  // "member", "admin"
  status    String   @default("active")  // "active", "blocked"
  templates Template[]
  submissions Submission[]
}

model Template {
  id             String   @id @default(cuid())
  title          String   @default("Untitled")
  description    String   @default("No description")
  topic          String   @default("general")
  access         String   @default("public")  // "public", "private"
  thumbnailUrl   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creatorId      String
  creator       User @relation(fields: [creatorId], references: [clerkId], onDelete: Cascade)
  tags          TemplateTag[]
  invitedUsers  InvitedUser[]
  questions     Question[]
  submissions   Submission[]

  @@index([creatorId]) // Index for fetching user's templates
}

model InvitedUser {
  id          String   @id @default(cuid())
  email       String
  templateId  String
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, email])
  @@index([templateId])
}

model Question {
  id          String     @id @default(cuid())
  templateId  String
  template    Template   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  label       String
  description String     @db.Text
  type        String     // "single-line", "multi-line", "checkbox", "radio-checkbox", "integer"
  placeholder String?
  required    Boolean    @default(false)
  show        Boolean    @default(true)
  options     Option[]
  answers     Answer[]

  @@index([templateId])
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String

  @@index([questionId])
}

model Tag {
  id    String        @id @default(cuid())
  name  String        @unique
  templates TemplateTag[]
}

model TemplateTag {
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String

  @@id([templateId, tagId]) // composite key
}

model Submission {
  id          String       @id @default(cuid())
  template    Template     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  user        User         @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  answers     Answer[]

  @@index([templateId])
  @@index([userId])
}

model Answer {
  id           String     @id @default(cuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  value        String     

  @@unique([submissionId, questionId]) 
  @@index([questionId])
}

